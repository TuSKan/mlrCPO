* TO-DO:
** test todo
- [ ] dataformat.factor.with.ordered should always influence how strictly data form is checked in retrafo
- [ ] make sure predict() and invertCPO do the same thing, and are documented as such everywhere
- [ ] properties adding.min etc. for multiplexer etc
- [ ] multiplexer: check for affect.*, be less restrictive
- [ ] properties: retrafo adds 'missings' to needed.max if not part of adding.min.
- [ ] caching CPO
- [ ] hyperparameter transforming cpo wrapper
- [ ] convertNamesToItems, ItemsToNames
- [ ] on.par.out.of.bounds setting
- [ ] test individual CPOs
** cosmetic changes
- [X] call map
- [ ] !..%in%.. -> %nin%
- [ ] limit line length
- [ ] use if ({ = }) more often
- [ ] text output lines may be longer.
- [ ] plural s unification
- [ ] centralize output strings
- [ ] roxygen-document internal functions
** Features
- [ ] cpoDummyEncode: referenzlevel waehlen ; 'ref.cat'
- [X] listCPO() nicer print
- [ ] exporting / fixing / hiding hyperparameters needs to handle requirements.
- [ ] cpoCbind: prevent copies
- [ ] check shapeinfo when reattaching retrafos
- [ ] option to drop 'truth' columns
- [X] meta-CPOs: difficulties with 'properties.needed', 'properties.adding:
  - [X] properties.needed is the union of all properties.needed, properties and properties.adding are intersections
  - [X] optionally set to less strict properties: needed is intersection, properties and adding are unions; properties.needed must be ignored internally then.
  - [X] cpoApply must have all properties, all properties.adding, must ignore properties.needed
** CPOs
- [ ] 'cat_P' class prevalence
- [ ] 'interaction'
- [ ] QR
- [X] spatialSign
- [ ] kernelPCA (kernlab) kpca
- [ ] ICA
- [-] converting features to nums:
  - [X] 'as.numeric'
  - [ ] ordered -> factor
  - [ ] ordered -> as.numeric
  - [ ] contr.poly, etc.
  - [ ] knn impute
  - [ ] binning -> to ordereds, to numbers
- [ ] cpoRecodeNums (mit konstante, mit maximum, ...)
- [ ] cpoNAIndicators
- [ ] cpoMergeSmallLevels
- [ ] cpo crossval
  - [ ] learner wrapping cpo:
    input -[X]-> cluster. training by data %>>% X. prediction by [dummy] -> inverter(preddata %>>% retrafo(MODEL))
** news
- [ ] colApplyCPO
- [ ] cpoRangeScale
- [ ] impact encoding: level -> probability fuer jede klasse
- [ ] 'cat_B' ('bayesian' logit) x_catB = logit(P[y==target|x]) - logit(P[y==target]
- [ ] cpoDropConst
** sources:
- [ ]  https://topepo.github.io/recipes/reference/index.html
- [ ]  https://stats.idre.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/

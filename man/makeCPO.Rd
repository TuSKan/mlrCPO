% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CPO.R
\name{makeCPO}
\alias{makeCPO}
\title{Create a custom CPO constructor}
\usage{
makeCPO(.cpo.name, ..., .par.set = NULL, .par.vals = list(),
  .datasplit = c("target", "most", "all", "no", "task", "factor",
  "onlyfactor", "ordered", "numeric"), .stateless = FALSE,
  .properties = c("numerics", "factors", "ordered", "missings"),
  .properties.adding = character(0), .properties.needed = character(0),
  .properties.target = c("cluster", "classif", "multilabel", "regr", "surv",
  "oneclass", "twoclass", "multiclass", "lcens", "rcens", "icens"), cpo.trafo,
  cpo.retrafo)
}
\arguments{
\item{.cpo.name}{[\code{character(1)}]\cr
The name of the resulting CPO constructor / CPO. This is used for identification in output.}

\item{...}{Parameters of the CPO, in the format of \code{\link{paramSetSugar}}.}

\item{.par.set}{[\code{ParamSet}]\cr
Optional parameter set. If this is not \code{NULL}, the \dQuote{...} parameters are ignored.
Default is \code{NULL}.}

\item{.par.vals}{[\code{list}]\cr
Named list of default parameter values for the CPO. These are used additionally to the
parameter default values in \dQuote{...} and \code{.par.set}. It is preferred to use
these default values, and not \code{.par.vals}. Default is \code{list()}.}

\item{.datasplit}{[\code{character(1)}]\cr
Indicate what format the data should be as seen by \dQuote{cpo.trafo}. Possibilities are:
\itemize{
  \item target the \dQuote{data} variable contains the data in a data.frame without
    the target column(s), the \dQuote{target} variable contains the target column(s) in
    a data.frame.
  \item most the \dQuote{data} is a list containing three data.frames: \dQuote{numeric}
    the numeric columns, \dQuote{factor} the factorial columns (ordered and unordered),
    \dQuote{other} the columns that are neither numeric nor factors. The \dQuote{target}
    variable contains the target column(s) in a data.frame.
  \item all similarly to \dQuote{most}, but factors are additionally split up into \dQuote{factor}
    (unordered factors) and \dQuote{ordered}.
  \item no the \dQuote{data} variable contains a data.frame with all data, the \dQuote{target}
    variable is a \code{character} indicating the names of the target columns.
  \item task the \dQuote{data} variable contains the data as a \dQuote{\link{Task}}.
  \item factor similar to \dQuote{target}, but \dQuote{data} will only contain the features
    whtat are either of type \dQuote{factor} or \dQuote{ordered}.
  \item onlyfactor similar to \dQuote{target} but \dQuote{data} will only contain the features
    whtat are of type \dQuote{factor}.
  \item ordered similar to \dQuote{target} but \dQuote{data} will only contain the features
    whtat are of type \dQuote{ordered}.
  \item numeric similar to \dQuote{target} but \dQuote{data} will only contain the features
    whtat are of type \dQuote{numeric}.
}
The returned data must always be in the same format as the one requested and it is an error to
change the target column(s) in the \dQuote{no} and \dQuote{task}. If \dQuote{.datasplit} is
\dQuote{most} or \dQuote{all}, the \dQuote{$numeric} slot of the returned object may also be a
\code{matrix}. If \dQuote{.datasplit} is \dQuote{numeric}, the returned object may also be a
matrix.
Default is \dQuote{target}.}

\item{.properties}{[\code{character}]\cr
The kind if data that the CPO will be able to handle. This can be one or many of: \dQuote{numerics},
\dQuote{factors}, \dQuote{ordered}, \dQuote{missings}.
There should be a bias towards including properties. If a property is absent, the preproc
operator will reject the data. If an operation e.g. only works on numeric columns that have no
missings (like PCA), it is recommended to give all properties, ignore the columns that
are not numeric (using \dQuote{.datasplit} = \dQuote{most}), and giving an error when
there are missings in the numeric columns (since missings in factorial features are not a problem).
Defaults to the maximal set.}

\item{.properties.adding}{[\code{character}]\cr
Can be one or many of the same values as \dQuote{.properties}. These properties get added to
a Learner (or CPO) coming after / behind this CPO. When a CPO imputes missing values, for example,
this should be \dQuote{missings}. This must be a subset of \dQuote{.properties}. Default is
\code{character(0)}.}

\item{.properties.needed}{[\code{character}]\cr
Can be one or many of the same values as \dQuote{.properties}. These properties are required
from a Learner (or CPO) coming after / behind this CPO. E.g., when a CPO converts factors to
numerics, this should be \dQuote{numerics} (and \dQuote{.properties.adding} should be \dQuote{factors}).
Default is \code{character(0)}.}

\item{cpo.trafo}{[\code{language} | \code{function}]\cr
This can either be a function, just the expressions to perform wrapped in curly braces.
If this is a function, it must have the parameters \dQuote{data} and \dQuote{target},
as well as the parameters specified in \dQuote{...} or \dQuote{.par.set}. (Alternatively,
the function may have a dotdotdot argument). It must return a \dQuote{data.frame}, a \dQuote{task},
a dQuote{matrix}, or a \dQuote{list} of \dQuote{data.frame} and \dQuote{matrix} objects, depending
on the parameter \dQuote{.datasplit}. If \dQuote{cpo.retrafo} is given, it must create a \dQuote{control}
variable in its namespace, which will be passed on to \dQuote{cpo.retrafo}. If \dQuote{cpo.retrafo} is
not given, it must create a \dQuote{cpo.retrafo} function within its namespace, which will be called
for re-transformation. This function must have a \dQuote{data} and \dQuote{target} argument.\cr
If \dQuote{cpo.trafo} is a list of expressions (preferred), it is turned into a function
by mlr, with the above mentioned criteria.}

\item{cpo.retrafo}{[\code{language} | \code{function}]\cr
Similarly to \dQuote{cpo.trafo}, this is either a function or a sequence of expressions
in curly braces (preferred), or \code{NULL}. This function must have the same arguments, except that
instead of a \dQuote{target} argument, it has a \dQuote{control} argument, which will be
the value created in the \dQuote{cpo.trafo} run. It gets its input data in the same format as
\dQuote{cpo.trafo}, with the exception that if \dQuote{.datasplit} is \dQuote{task}, it gets a
\dQuote{data.frame} as if \dQuote{.datasplit} were \dQuote{no}. This function must similarly return an
object in the same format as it received as input.}
}
\description{
Create a CPO constructor.
}
\seealso{
Other CPO: \code{\link{CPO}}, \code{\link{NULLCPO}},
  \code{\link{\%>>\%}}, \code{\link{applyCPO}},
  \code{\link{attachCPO}}, \code{\link{chainCPO}},
  \code{\link{cpoMultiplex}}, \code{\link{cpoPca}},
  \code{\link{cpoScale}}, \code{\link{getCPOName}},
  \code{\link{getHyperPars}},
  \code{\link{getRetrafoState}},
  \code{\link{hasTagInvert}}, \code{\link{inverter<-}},
  \code{\link{inverter}}, \code{\link{makeCPOTargetOp}},
  \code{\link{makeRetrafoFromState}},
  \code{\link{retrafo<-}}, \code{\link{retrafo}},
  \code{\link{setHyperPars}}, \code{\link{tagInvert}}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CPO.R
\name{makeCPO}
\alias{makeCPO}
\title{Create a custom CPO constructor}
\usage{
makeCPO(cpo.name, par.set = NULL, par.vals = list(),
  dataformat = c("df.features", "split", "df.all", "task", "factor",
  "ordered", "numeric"), dataformat.factor.with.ordered = TRUE,
  export.params = TRUE, fix.factors = FALSE, properties = c("numerics",
  "factors", "ordered", "missings"), properties.adding = character(0),
  properties.needed = character(0), properties.target = c("cluster",
  "classif", "multilabel", "regr", "surv", "oneclass", "twoclass", "multiclass",
  "lcens", "rcens", "icens"), packages = character(0), cpo.trafo)
}
\arguments{
\item{cpo.name}{[\code{character(1)}]\cr
The name of the resulting CPO constructor / CPO. This is used for identification in output,
and as the default \code{id}.}

\item{par.set}{[\code{ParamSet} | \code{NULL}]\cr
Optional parameter set, for configuration of CPOs during construction or by hyperparameters.
Default is \code{NULL}.}

\item{par.vals}{[\code{list}]\cr
Named list of default parameter values for the CPO. These are used additionally to the
parameter default values in \code{par.set}. It is preferred to use
these default values, and not \code{par.vals}. Default is \code{list()}.}

\item{dataformat}{[\code{character(1)}]\cr
  Indicate what format the data should be as seen by \dQuote{cpo.trafo} and the retrafo function. Possibilities are:
  \tabular{lll}{
    .dataformat \tab data                          \tab target                \cr
    \hline
    df.all      \tab data.frame with target cols   \tab target colnames       \cr
    df.features \tab data.frame without target     \tab data.frame of target  \cr
    task        \tab full task                     \tab target colnames       \cr
    split       \tab list of data.frames by type   \tab data.frame of target  \cr
    [type]      \tab data.frame of [type] feats only \tab data.frame of target  \cr
  }
  [type] can be any one of \dQuote{factor}, \dQuote{numeric}, \dQuote{ordered}.\cr
  For \code{dataformat} \code{==} \dQuote{split}, the list has entries \dQuote{factor}, \dQuote{numeric},
  \dQuote{other}, and possibly \dQuote{ordered}--the last one only present if \code{dataformat.factor.with.ordered}
  is \code{FALSE}.

  If the CPO is a Feature Operation CPO, then the return value of the retrafo function must be in the same format as the one requested.
  E.g. if \code{dataformat} is \dQuote{split}, the return value must be a named list with entries \dQuote{numeric},
  \dQuote{factor}, and \dQuote{other}. The types of the returned data may be arbitrary: In the given example,
  the \dQuote{factor} slot of the returned list may contain numeric data. (Note however that if data is returned
  that has a type not already present in the data, \dQuote{properties.needed} must specify this.)

  If \code{dataformat} is either \dQuote{df.all} or \dQuote{task}, the
  target column(s) in the returned value of the retrafo function must be identical with the target column(s) given as input.

  If \dQuote{dataformat} is \dQuote{split}, the \dQuote{$numeric} slot of the value returned by the retrafo function
  object may also be a \code{matrix}. If \dQuote{dataformat} is \dQuote{numeric}, the returned object may also be a
  matrix.}

\item{export.params}{[\code{logical(1)} | \code{character}]\cr
Indicates which CPO parameters are exported by default. Exported parameters can be changed after construction using \code{\link{setHyperPars}},
but exporting too many parameters may lead to messy parameter sets if many CPOs are combined. This can be overridden on construction.
If this is a \code{logical(1)}, \code{TRUE} exports all parameters, \code{FALSE} to exports no parameters. It may also be a \code{character},
indicating the names of parameters to be exported. Default is \code{TRUE}.}

\item{fix.factors}{[\code{logical(1)}]\cr
Whether to constrain factor levels of new data to the levels of training data, for each factorial or ordered column. If new data contains
factors that were not present in training data, the values are set to \code{NA}. Default is \code{FALSE}.}

\item{properties}{[\code{character}]\cr
The kind if data that the CPO will be able to handle. This can be one or many of: \dQuote{numerics},
\dQuote{factors}, \dQuote{ordered}, \dQuote{missings}.
There should be a bias towards including properties. If a property is absent, the preproc
operator will reject the data. If an operation e.g. only works on numeric columns that have no
missings (like PCA), it is recommended to give all properties, ignore the columns that
are not numeric (using \dQuote{dataformat} = \dQuote{split}), and giving an error when
there are missings in the numeric columns (since missings in factorial features are not a problem).
Defaults to the maximal set.}

\item{properties.adding}{[\code{character}]\cr
Can be one or many of the same values as \dQuote{properties} for Feature Operation CPOs, and one or many of the same values as \dQuote{properties.target}
for Target Operation CPOs. These properties get added to a Learner (or CPO) coming after / behind this CPO. When a CPO imputes missing values, for example,
this should be \dQuote{missings}. This must be a subset of \dQuote{properties} or \dQuote{properties.target}. Default is
\code{character(0)}.}

\item{properties.needed}{[\code{character}]\cr
Can be one or many of the same values as \dQuote{properties} for Feature Operation CPOs,
and one or many of the same values as \dQuote{properties.target}. These properties are required
from a Learner (or CPO) coming after / behind this CPO. E.g., when a CPO converts factors to
numerics, this should be \dQuote{numerics} (and \dQuote{properties.adding} should be \dQuote{factors}).
Default is \code{character(0)}.}

\item{properties.target}{[\code{character}]\cr
  For Feature Operation CPOs, this can be one or many of \dQuote{cluster}, \dQuote{classif}, \dQuote{multilabel}, \dQuote{regr}, \dQuote{surv},
  \dQuote{oneclass}, \dQuote{twoclass}, \dQuote{multiclass}. Just as \code{properties}, it
  indicates what kind of data a CPO can work with. Data given as data.frame needs the \dQuote{cluster} property. Default is the maximal set.

  For Target Operation CPOs, this should only be given if the CPO operates on classification tasks. It must then be a subset of \dQuote{oneclass},
  \dQuote{twoclass}, or \dQuote{multiclass}. Otherwise, it should be \code{character(0)}. Default is \code{character(0)}.}

\item{packages}{[\code{character}]\cr
Package(s) that should be loaded when the CPO is constructed. This gives the user an early error if
a package required for the CPO is not available on his system, or can not be loaded. Default is \code{character(0)}.}

\item{cpo.trafo}{[\code{function}]\cr
This is a function which must have the parameters \dQuote{data} and \dQuote{target},
as well as the parameters specified in \dQuote{par.set}. (Alternatively,
the function may have a dotdotdot argument). This is a constructor function which must return a \dQuote{retrafo} function which
modifies data. This retrafo function must have exactly one argument--the (new) data--and return the modified data. The format
of the argument, and of the return value of the retrafo function, depends on the value of the \code{dataformat} parameter.}
}
\description{
\code{makeCPO} creates a Feature Operation CPO constructor, i.e. a constructor for a CPO that will
operate on feature columns. \code{makeCPOTargetOp} creates a Target Operation CPO constructor, which
creates CPOs that operate on the target column.

\code{makeCPO} has a comparatively easy user-interface; for more advanced use-cases and interesting shortcuts,
use \code{\link{makeCPOExtended}}.
}
\examples{
# an example constant feature remover CPO
constFeatRem = makeCPO("constFeatRem",
  dataformat = "df.features",
  cpo.trafo = function(data, target) {
    cols.keep = names(Filter(function(x) {
        length(unique(x)) > 1
      }, data))
    # the following function will do both the trafo and retrafo
    result = function(data) {
      data[cols.keep]
    }
    result
  })
}
\seealso{
Other CPO: \code{\link{CPOImputer}}, \code{\link{CPO}},
  \code{\link{NULLCPO}}, \code{\link{\%>>\%}},
  \code{\link{applyCPO}}, \code{\link{attachCPO}},
  \code{\link{chainCPO}}, \code{\link{cpoApplyFun}},
  \code{\link{cpoApply}}, \code{\link{cpoAsNumeric}},
  \code{\link{cpoCollapseFact}},
  \code{\link{cpoDropConstants}},
  \code{\link{cpoDummyEncode}},
  \code{\link{cpoFilterFeatures}},
  \code{\link{cpoFixFactors}},
  \code{\link{cpoImpactEncodeClassif}},
  \code{\link{cpoImpactEncodeRegr}},
  \code{\link{cpoImpute}},
  \code{\link{cpoMissingIndicators}},
  \code{\link{cpoModelMatrix}}, \code{\link{cpoMultiplex}},
  \code{\link{cpoPca}}, \code{\link{cpoProbEncode}},
  \code{\link{cpoQuantileBinNumerics}},
  \code{\link{cpoScaleMaxAbs}},
  \code{\link{cpoScaleRange}}, \code{\link{cpoScale}},
  \code{\link{cpoSelect}}, \code{\link{cpoSpatialSign}},
  \code{\link{getCPOAffect}}, \code{\link{getCPOId}},
  \code{\link{getCPOName}}, \code{\link{getRetrafoState}},
  \code{\link{hasTagInvert}}, \code{\link{inverter<-}},
  \code{\link{inverter}}, \code{\link{makeCPOExtended}},
  \code{\link{makeRetrafoFromState}},
  \code{\link{retrafo<-}}, \code{\link{retrafo}},
  \code{\link{setCPOId}}, \code{\link{tagInvert}}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CPO_impute.R
\name{CPOImputer}
\alias{CPOImputer}
\alias{cpoImputeConstant}
\alias{cpoImputeMedian}
\alias{cpoImputeMean}
\alias{cpoImputeMode}
\alias{cpoImputeMin}
\alias{cpoImputeMax}
\alias{cpoImputeUniform}
\alias{cpoImputeNormal}
\alias{cpoImputeHist}
\alias{cpoImputeLearner}
\title{Impute and re-impute data}
\usage{
cpoImputeConstant(const, impute.new.levels = TRUE,
  recode.factor.levels = TRUE, id = NULL, export = "export.default",
  affect.type = NULL, affect.index = integer(0),
  affect.names = character(0), affect.pattern = NULL,
  affect.invert = FALSE, affect.pattern.ignore.case = FALSE,
  affect.pattern.perl = FALSE, affect.pattern.fixed = FALSE)

cpoImputeMedian(impute.new.levels = TRUE, recode.factor.levels = TRUE,
  id = NULL, export = "export.default", affect.type = NULL,
  affect.index = integer(0), affect.names = character(0),
  affect.pattern = NULL, affect.invert = FALSE,
  affect.pattern.ignore.case = FALSE, affect.pattern.perl = FALSE,
  affect.pattern.fixed = FALSE)

cpoImputeMean(impute.new.levels = TRUE, recode.factor.levels = TRUE,
  id = NULL, export = "export.default", affect.type = NULL,
  affect.index = integer(0), affect.names = character(0),
  affect.pattern = NULL, affect.invert = FALSE,
  affect.pattern.ignore.case = FALSE, affect.pattern.perl = FALSE,
  affect.pattern.fixed = FALSE)

cpoImputeMode(impute.new.levels = TRUE, recode.factor.levels = TRUE,
  id = NULL, export = "export.default", affect.type = NULL,
  affect.index = integer(0), affect.names = character(0),
  affect.pattern = NULL, affect.invert = FALSE,
  affect.pattern.ignore.case = FALSE, affect.pattern.perl = FALSE,
  affect.pattern.fixed = FALSE)

cpoImputeMin(multiplier = 1, impute.new.levels = TRUE,
  recode.factor.levels = TRUE, id = NULL, export = "export.default",
  affect.type = NULL, affect.index = integer(0),
  affect.names = character(0), affect.pattern = NULL,
  affect.invert = FALSE, affect.pattern.ignore.case = FALSE,
  affect.pattern.perl = FALSE, affect.pattern.fixed = FALSE)

cpoImputeMax(multiplier = 1, impute.new.levels = TRUE,
  recode.factor.levels = TRUE, id = NULL, export = "export.default",
  affect.type = NULL, affect.index = integer(0),
  affect.names = character(0), affect.pattern = NULL,
  affect.invert = FALSE, affect.pattern.ignore.case = FALSE,
  affect.pattern.perl = FALSE, affect.pattern.fixed = FALSE)

cpoImputeUniform(min = NA_real_, max = NA_real_, impute.new.levels = TRUE,
  recode.factor.levels = TRUE, id = NULL, export = "export.default",
  affect.type = NULL, affect.index = integer(0),
  affect.names = character(0), affect.pattern = NULL,
  affect.invert = FALSE, affect.pattern.ignore.case = FALSE,
  affect.pattern.perl = FALSE, affect.pattern.fixed = FALSE)

cpoImputeNormal(mu = NA_real_, sd = NA_real_, impute.new.levels = TRUE,
  recode.factor.levels = TRUE, id = NULL, export = "export.default",
  affect.type = NULL, affect.index = integer(0),
  affect.names = character(0), affect.pattern = NULL,
  affect.invert = FALSE, affect.pattern.ignore.case = FALSE,
  affect.pattern.perl = FALSE, affect.pattern.fixed = FALSE)

cpoImputeHist(breaks = "Sturges", use.mids = TRUE,
  impute.new.levels = TRUE, recode.factor.levels = TRUE, id = NULL,
  export = "export.default", affect.type = NULL,
  affect.index = integer(0), affect.names = character(0),
  affect.pattern = NULL, affect.invert = FALSE,
  affect.pattern.ignore.case = FALSE, affect.pattern.perl = FALSE,
  affect.pattern.fixed = FALSE)

cpoImputeLearner(learner, features = NULL, impute.new.levels = TRUE,
  recode.factor.levels = TRUE, id = NULL, export = "export.default",
  affect.type = NULL, affect.index = integer(0),
  affect.names = character(0), affect.pattern = NULL,
  affect.invert = FALSE, affect.pattern.ignore.case = FALSE,
  affect.pattern.perl = FALSE, affect.pattern.fixed = FALSE)
}
\arguments{
\item{const}{[any]\cr
Constant valued use for imputation.}

\item{impute.new.levels}{[\code{logical(1)}]\cr
If new, unencountered factor level occur during reimputation,
should these be handled as NAs and then be imputed the same way?
Default is \code{TRUE}.}

\item{recode.factor.levels}{[\code{logical(1)}]\cr
Recode factor levels after reimputation, so they match the respective element of
\code{lvls} (in the description object) and therefore match the levels of the
feature factor in the training data after imputation?.
Default is \code{TRUE}.}

\item{id}{[\code{character(1)}]\cr
id to use as prefix for the CPO's hyperparameters. this
must be used to avoid name clashes when composing two
CPOs of the same type, or with learners or other CPOS
with hyperparameters with clashing names.}

\item{multiplier}{[\code{numeric(1)}]\cr
Value that stored minimum or maximum is multiplied with when imputation is done.}

\item{min}{[\code{numeric(1)}]\cr
Lower bound for uniform distribution.
If NA (default), it will be estimated from the data.}

\item{max}{[\code{numeric(1)}]\cr
Upper bound for uniform distribution.
If NA (default), it will be estimated from the data.}

\item{mu}{[\code{numeric(1)}]\cr
Mean of normal distribution. If missing it will be estimated from the data.}

\item{sd}{[\code{numeric(1)}]\cr
Standard deviation of normal distribution. If missing it will be estimated from the data.}

\item{breaks}{[\code{numeric(1)} | \dQuote{Sturges}]\cr
Number of breaks to use in \code{\link[graphics]{hist}}.
Defaults to auto-detection via \dQuote{Sturges}.}

\item{use.mids}{[\code{logical(1)}]\cr
If \code{x} is numeric and a histogram is used, impute with bin mids (default)
or instead draw uniformly distributed samples within bin range.}

\item{learner}{[\code{\link{Learner}} | \code{character(1)}]\cr
Supervised learner. Its predictions will be used for imputations.
If you pass a string the learner will be created via \code{\link{makeLearner}}.
Note that the target column is not available for this operation.}

\item{features}{[\code{character}]\cr
Features to use in \code{learner} for prediction.
Default is \code{NULL} which uses all available features except the target column
of the original task.}
}
\description{
Allows imputation of missing feature values through various techniques.
Note that you have the possibility to re-impute a data set
in the same way as the imputation was performed during training.
This especially comes in handy during resampling when one wants to perform the
same imputation on the test set as on the training set.

This function creates a CPO object, which can be applied to
\code{\link{Task}}s, \code{data.frame}s, \code{link{Learner}}s
and other CPO objects using the \code{\link{\%>>\%}} operator.

The parameters of this object can be changed after creation
using the function \code{\link{setHyperPars}}. The other
hyper-parameter manipulating functins, \code{\link{getHyperPars}}
and \code{\link{getParamSet}} similarly work as one expects.

If the \dQuote{id} parameter is given, the hyperparameters
will have this id as aprefix; this will, however, not change
the parameters of the creator function.
}
\details{
The description object contains these slots
\describe{
  \item{target [\code{character}]}{See argument.}
  \item{features [\code{character}]}{Feature names (column names of \code{data}).},
  \item{classes [\code{character}]}{Feature classes (storage type of \code{data}).}
  \item{lvls [\code{named list}]}{Mapping of column names of factor features to their levels,
    including newly created ones during imputation.}
  \item{impute [\code{named list}]}{Mapping of column names to imputation functions.}
  \item{dummies [\code{named list}]}{Mapping of column names to imputation functions.}
  \item{impute.new.levels [\code{logical(1)}]}{See argument.}
  \item{recode.factor.levels [\code{logical(1)}]}{See argument.}
}
}
\seealso{
Other impute: \code{\link{cpoImpute}}

Other CPO: \code{\link{CPO}}, \code{\link{NULLCPO}},
  \code{\link{\%>>\%}}, \code{\link{applyCPO}},
  \code{\link{attachCPO}}, \code{\link{chainCPO}},
  \code{\link{cpoApplyFun}}, \code{\link{cpoApply}},
  \code{\link{cpoAsNumeric}},
  \code{\link{cpoCollapseFact}},
  \code{\link{cpoDropConstants}},
  \code{\link{cpoDummyEncode}},
  \code{\link{cpoFilterFeatures}},
  \code{\link{cpoFixFactors}},
  \code{\link{cpoImpactEncodeClassif}},
  \code{\link{cpoImpactEncodeRegr}},
  \code{\link{cpoImpute}},
  \code{\link{cpoMissingIndicators}},
  \code{\link{cpoModelMatrix}}, \code{\link{cpoMultiplex}},
  \code{\link{cpoPca}}, \code{\link{cpoProbEncode}},
  \code{\link{cpoQuantileBinNumerics}},
  \code{\link{cpoScaleMaxAbs}},
  \code{\link{cpoScaleRange}}, \code{\link{cpoScale}},
  \code{\link{cpoSelect}}, \code{\link{cpoSpatialSign}},
  \code{\link{getCPOAffect}}, \code{\link{getCPOId}},
  \code{\link{getCPOName}}, \code{\link{getRetrafoState}},
  \code{\link{hasTagInvert}}, \code{\link{inverter<-}},
  \code{\link{inverter}}, \code{\link{makeCPOExtended}},
  \code{\link{makeRetrafoFromState}},
  \code{\link{retrafo<-}}, \code{\link{retrafo}},
  \code{\link{setCPOId}}, \code{\link{tagInvert}}
}

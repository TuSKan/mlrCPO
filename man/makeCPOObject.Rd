% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CPOObjectBased.R
\name{makeCPOObject}
\alias{makeCPOObject}
\title{Create a custom CPO constructor}
\usage{
makeCPOObject(.cpo.name, ..., .par.set = NULL, .par.vals = list(),
  cpo.trafo, cpo.retrafo)
}
\arguments{
\item{.cpo.name}{[\code{character(1)}]\cr
The name of the resulting CPO constructor / CPO. This is used for identification in output.}

\item{...}{Parameters of the CPO, in the format of \code{\link{paramSetSugar}}.}

\item{.par.set}{[\code{ParamSet}]\cr
Optional parameter set. If this is not \code{NULL}, the \dQuote{...} parameters are ignored.}

\item{.par.vals}{[\code{list}]\cr
Named list of default parameter values for the CPO. These are used additionally to the
parameter default values in \dQuote{...} and \code{.par.set}. It is preferred to use
these default values, and not \code{.par.vals}.}

\item{cpo.trafo}{[\code{language} | \code{function}]\cr
This can either be a function, just the expressions to perform wrapped in curly braces.
If this is a function, it must have the parameters \dQuote{data} and \dQuote{target},
as well as the parameters specified in \dQuote{...} or \dQuote{.par.set}. (Alternatively,
the function may have a dotdotdot argument). It must return a \dQuote{data.frame} object.
Furthermore, it must create a \dQuote{control} variable in its namespace, which will
be passed on to \dQuote{cpo.retrafo}.\cr
If \dQuote{cpo.trafo} is a list of expressions (preferred), it is turned into a function
by mlr, with the above mentioned criteria.}

\item{cpo.retrafo}{[\code{language} | \code{function}]\cr
Similarly to \dQuote{cpo.trafo}, this is either a function or a sequence of expressions
in curly braces (preferred). This function must have the same arguments, except that
instead of a \dQuote{target} argument, it has a \dQuote{control} argument, which will be
the value created in the \dQuote{cpo.trafo} run. This function must similarly return a
\dQuote{data.frame} object.}
}
\description{
Create an object-based CPO constructor. This has the advantage of being more memory efficient
and being easier to debug, but possibly less elegant than function-based CPOs (as created
by \code{\link{makeCPOFunctional}}).
}
\examples{
noop = makeCPOObject("noop", dummy: logical, cpo.trafo = {
  control = 0
  data
}, cpo.retrafo = { data })

}
\seealso{
Other CPO: \code{\link{CPO}}, \code{\link{\%>>\%}},
  \code{\link{applyCPO}}, \code{\link{attachCPO}},
  \code{\link{cpoPca}}, \code{\link{cpoScale}},
  \code{\link{getCPOName}}, \code{\link{getHyperPars}},
  \code{\link{makeCPOFunctional}}, \code{\link{retrafo}},
  \code{\link{setHyperPars}}
}
